#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Response(object):
    """
    Attributes:
     - code
     - message
     - info
    """


    def __init__(self, code=None, message=None, info=None,):
        self.code = code
        self.message = message
        self.info = info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.info = CouponInfo()
                    self.info.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Response')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.info is not None:
            oprot.writeFieldBegin('info', TType.STRUCT, 3)
            self.info.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.code is None:
            raise TProtocolException(message='Required field code is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CouponInfo(object):
    """
    Attributes:
     - name
     - min_amount
     - cid
     - ctype
     - start_time
     - expired_time
     - max_invest_time
     - min_invest_time
     - amount
     - use_type
     - progress
     - des
    """


    def __init__(self, name=None, min_amount=None, cid=None, ctype=None, start_time=None, expired_time=None, max_invest_time=None, min_invest_time=None, amount=None, use_type=None, progress=None, des=None,):
        self.name = name
        self.min_amount = min_amount
        self.cid = cid
        self.ctype = ctype
        self.start_time = start_time
        self.expired_time = expired_time
        self.max_invest_time = max_invest_time
        self.min_invest_time = min_invest_time
        self.amount = amount
        self.use_type = use_type
        self.progress = progress
        self.des = des

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.min_amount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.ctype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.start_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.expired_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.max_invest_time = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.min_invest_time = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.amount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.use_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.progress = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.des = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CouponInfo')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.min_amount is not None:
            oprot.writeFieldBegin('min_amount', TType.I32, 2)
            oprot.writeI32(self.min_amount)
            oprot.writeFieldEnd()
        if self.cid is not None:
            oprot.writeFieldBegin('cid', TType.STRING, 3)
            oprot.writeString(self.cid.encode('utf-8') if sys.version_info[0] == 2 else self.cid)
            oprot.writeFieldEnd()
        if self.ctype is not None:
            oprot.writeFieldBegin('ctype', TType.I32, 4)
            oprot.writeI32(self.ctype)
            oprot.writeFieldEnd()
        if self.start_time is not None:
            oprot.writeFieldBegin('start_time', TType.STRING, 5)
            oprot.writeString(self.start_time.encode('utf-8') if sys.version_info[0] == 2 else self.start_time)
            oprot.writeFieldEnd()
        if self.expired_time is not None:
            oprot.writeFieldBegin('expired_time', TType.STRING, 6)
            oprot.writeString(self.expired_time.encode('utf-8') if sys.version_info[0] == 2 else self.expired_time)
            oprot.writeFieldEnd()
        if self.max_invest_time is not None:
            oprot.writeFieldBegin('max_invest_time', TType.I32, 7)
            oprot.writeI32(self.max_invest_time)
            oprot.writeFieldEnd()
        if self.min_invest_time is not None:
            oprot.writeFieldBegin('min_invest_time', TType.I32, 8)
            oprot.writeI32(self.min_invest_time)
            oprot.writeFieldEnd()
        if self.amount is not None:
            oprot.writeFieldBegin('amount', TType.I32, 9)
            oprot.writeI32(self.amount)
            oprot.writeFieldEnd()
        if self.use_type is not None:
            oprot.writeFieldBegin('use_type', TType.I32, 10)
            oprot.writeI32(self.use_type)
            oprot.writeFieldEnd()
        if self.progress is not None:
            oprot.writeFieldBegin('progress', TType.I32, 11)
            oprot.writeI32(self.progress)
            oprot.writeFieldEnd()
        if self.des is not None:
            oprot.writeFieldBegin('des', TType.STRING, 12)
            oprot.writeString(self.des.encode('utf-8') if sys.version_info[0] == 2 else self.des)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.min_amount is None:
            raise TProtocolException(message='Required field min_amount is unset!')
        if self.cid is None:
            raise TProtocolException(message='Required field cid is unset!')
        if self.ctype is None:
            raise TProtocolException(message='Required field ctype is unset!')
        if self.start_time is None:
            raise TProtocolException(message='Required field start_time is unset!')
        if self.expired_time is None:
            raise TProtocolException(message='Required field expired_time is unset!')
        if self.max_invest_time is None:
            raise TProtocolException(message='Required field max_invest_time is unset!')
        if self.min_invest_time is None:
            raise TProtocolException(message='Required field min_invest_time is unset!')
        if self.amount is None:
            raise TProtocolException(message='Required field amount is unset!')
        if self.use_type is None:
            raise TProtocolException(message='Required field use_type is unset!')
        if self.progress is None:
            raise TProtocolException(message='Required field progress is unset!')
        if self.des is None:
            raise TProtocolException(message='Required field des is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Response)
Response.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'info', [CouponInfo, None], None, ),  # 3
)
all_structs.append(CouponInfo)
CouponInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'min_amount', None, None, ),  # 2
    (3, TType.STRING, 'cid', 'UTF8', None, ),  # 3
    (4, TType.I32, 'ctype', None, None, ),  # 4
    (5, TType.STRING, 'start_time', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'expired_time', 'UTF8', None, ),  # 6
    (7, TType.I32, 'max_invest_time', None, None, ),  # 7
    (8, TType.I32, 'min_invest_time', None, None, ),  # 8
    (9, TType.I32, 'amount', None, None, ),  # 9
    (10, TType.I32, 'use_type', None, None, ),  # 10
    (11, TType.I32, 'progress', None, None, ),  # 11
    (12, TType.STRING, 'des', 'UTF8', None, ),  # 12
)
fix_spec(all_structs)
del all_structs
